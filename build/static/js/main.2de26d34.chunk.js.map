{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","getAllWaves","connectWallet","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","waves","wavesCleaned","map","address","waver","timestamp","Date","message","useEffect","onNewWave","from","prevState","on","off","className","onClick","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2de26d34.chunk.js","sourcesContent":["\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport \"./App.css\";\r\nimport abi from \"./utils/WavePortal.json\";\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n\r\n  const [allWaves, setAllWaves] = useState([]);\r\n\r\n  const contractAddress = \"0xfec3155141E9C2D4a2194D87ebea5D6379B99c19\";\r\n\r\n  const contractABI = abi.abi;\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n        getAllWaves();\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Implement your connectWallet method here\r\n  */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const wave = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n        /*\r\n          * Execute the actual wave from your smart contract\r\n          */\r\n        const waveTxn = await wavePortalContract.wave(\"I love you!\", { gasLimit: 300000 });\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  // const getAllWaves = async () => {\r\n  //   try {\r\n  //     const { ethereum } = window;\r\n  //     if (ethereum) {\r\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\r\n  //       const signer = provider.getSigner();\r\n  //       const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n  //       /*\r\n  //        * Call the getAllWaves method from your Smart Contract\r\n  //        */\r\n  //       const waves = await wavePortalContract.getAllWaves();\r\n\r\n\r\n  //       /*\r\n  //        * We only need address, timestamp, and message in our UI so let's\r\n  //        * pick those out\r\n  //        */\r\n  //       let wavesCleaned = [];\r\n\r\n  //       waves.forEach(wave => {\r\n  //         wavesCleaned.push({\r\n  //           address: wave.waver,\r\n  //           timestamp: new Date(wave.timestamp * 1000),\r\n  //           message: wave.message\r\n  //         });\r\n  //       });\r\n\r\n  //       /*\r\n  //        * Store our data in React State\r\n  //        */\r\n  //       setAllWaves(wavesCleaned);\r\n  //     } else {\r\n  //       console.log(\"Ethereum object doesn't exist!\")\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // }\r\n\r\n  const getAllWaves = async () => {\r\n    const { ethereum } = window;\r\n  \r\n    try {\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        const waves = await wavePortalContract.getAllWaves();\r\n  \r\n        const wavesCleaned = waves.map(wave => {\r\n          return {\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n          };\r\n        });\r\n  \r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  /**\r\n   * Listen in for emitter events!\r\n   */\r\n  useEffect(() => {\r\n    let wavePortalContract;\r\n\r\n    const onNewWave = (from, timestamp, message) => {\r\n      console.log(\"NewWave\", from, timestamp, message);\r\n      setAllWaves(prevState => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n      wavePortalContract.on(\"NewWave\", onNewWave);\r\n    }\r\n\r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off(\"NewWave\", onNewWave);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n          ðŸ‘‹ Hey there!\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n          I am farza and I worked on self-driving cars so that's pretty cool right? Connect your Ethereum wallet and wave at me!\r\n        </div>\r\n\r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allWaves.map((wave, index) => {\r\n          return (\r\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\r\n              <div>Address: {wave.address}</div>\r\n              <div>Time: {wave.timestamp.toString()}</div>\r\n              <div>Message: {wave.message}</div>\r\n            </div>)\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}